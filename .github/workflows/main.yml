name: Deploy Portfolio WebApp to EC2

# Trigger the workflow on push events to the main branch
# Ignore changes to README files, LICENSE, and .gitignore
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - README.md
      - LICENSE
      - .gitignore
 
  # Trigger the workflow on pull requests to the main branch
  pull_request:
    branches:
      - main
  # Allow the workflow to be triggered manually
  workflow_dispatch:
    
    
 
jobs:
  deploy:
    # Environment variable to specify the environment
    environment: Production
    # Only run the job on the main branch
    if: github.ref == 'refs/heads/main'
    # Name of the job
    name: Deploy to EC2
    # Run the job on an ubuntu-latest environment
    runs-on: ubuntu-latest

    steps:
      # Checkout the code in the repository
      - name: Checkout the files
        uses: actions/checkout@v4

      # Deploy the code to the EC2 instance
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        with:
          # SSH key to use for deployment
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          # Hostname of the EC2 instance
          REMOTE_HOST: ${{ secrets.HOST_DNS }}
          # Username to use for deployment
          REMOTE_USER: ${{ secrets.EC2_USER }}
          # Target directory on the EC2 instance
          TARGET: ${{ secrets.TARGET_DIR }}

      # Execute remote ssh commands using the ssh key
      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          # Hostname of the EC2 instance
          host: ${{ secrets.HOST_DNS }}
          # Username to use for deployment
          username: ${{ secrets.EC2_USER }}
          # SSH key to use for deployment
          key: ${{ secrets.EC2_SSH_KEY }}
          # Script to execute on the remote server
          script: |
            # Update the package list
            sudo apt-get -y update
            # Install apache2
            sudo apt-get install -y apache2
            # Reload the daemon and start apache2
            sudo systemctl daemon-reload
            sudo systemctl start apache2
            # Enable apache2 to start on boot
            sudo systemctl enable apache2
            
            # Remove existing contents of /var/www/html
            sudo rm -rf /var/www/html/*
            
            # Copy new files to /var/www/html (fix the path issue)
            sudo cp -r ${{ secrets.TARGET_DIR }}/* /var/www/html/
            
            # Create Apache configuration for CORS and proper file serving
            sudo tee /etc/apache2/sites-available/portfolio.conf > /dev/null <<EOF
            <VirtualHost *:80>
                DocumentRoot /var/www/html
                
                # Enable CORS for all files
                <Directory "/var/www/html">
                    Header always set Access-Control-Allow-Origin "*"
                    Header always set Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT"
                    Header always set Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With"
                    
                    Options Indexes FollowSymLinks
                    AllowOverride All
                    Require all granted
                </Directory>
                
                # Serve HTML files with proper MIME type
                <FilesMatch "\\.html$">
                    Header set Content-Type "text/html; charset=UTF-8"
                </FilesMatch>
                
                # Enable mod_headers and mod_rewrite
                LoadModule headers_module modules/mod_headers.so
                LoadModule rewrite_module modules/mod_rewrite.so
            </VirtualHost>
            EOF
            
            # Enable required Apache modules
            sudo a2enmod headers
            sudo a2enmod rewrite
            
            # Enable the site
            sudo a2ensite portfolio.conf
            sudo a2dissite 000-default.conf
            
            # Set proper permissions
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            
            # Restart Apache to apply changes
            sudo systemctl restart apache2
            echo "Deployment completed successfully!"

  notify-success:
    # Run this job if the deploy job is successful
    needs: deploy
    if: success()
    # Use the slack notification workflow
    uses: ./.github/workflows/slack.yml
    # Set the status and workflow name
    with:
      status: 'success'
      workflow_name: 'Portfolio Deployment'
    # Use the Slack webhook URL
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-failure:
    # Run this job if the deploy job fails
    needs: deploy
    if: failure()
    # Use the slack notification workflow
    uses: ./.github/workflows/slack.yml
    # Set the status and workflow name
    with:
      status: 'failure'
      workflow_name: 'Portfolio Deployment'
    # Use the Slack webhook URL
    secrets:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
